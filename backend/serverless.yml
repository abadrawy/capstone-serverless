service:
  name: watchList-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation


provider:
  name: aws
  runtime: nodejs10.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    WATCHLIST_TABLE: WatchList-${self:provider.stage}
    USER_ID_INDEX: UserIdIndex
    WATCHLIST_S3_BUCKET: watchlist-attachment-bucket-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 3000

iamRoleStatements:
    - Effect: Allow
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
  
custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: WatchList API
        description: Serverless application for WatchList
    models:
      - name: CreateWatchListItemRequest
        contentType: "application/json"
        schema:
          required:
            - name
          properties:
            name:
              type: string
        
      - name: UpdateWatchListItemRequest
        contentType: "application/json"
        schema:
          required:
            - name
          properties:
            name:
              type: string
           

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetWatchList:
    handler: src/lambda/http/getWatchList.handler
    events:
      - http:
          method: get
          path: watchList
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WATCHLIST_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"


  CreateWatchListItem:
    handler: src/lambda/http/createWatchListItem.handler
    events:
      - http:
          method: post
          path: watchList
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new item in watchList
            description: Create a new item in watchList
            requestModels:
              'application/json': CreateWatchListItemRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WATCHLIST_TABLE}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  UpdateWatchListItem:
    handler: src/lambda/http/updateWatchListItem.handler
    events:
      - http:
          method: patch
          path: watchList/{itemId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update an existing item in watchList
            description: Update an existing item in watchList
            requestModels:
              'application/json': UpdateWatchListItemRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WATCHLIST_TABLE}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  DeleteWatchListItem:
    handler: src/lambda/http/deleteWatchListItem.handler
    events:
      - http:
          method: delete
          path: watchList/{itemId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WATCHLIST_TABLE}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: watchList/{itemId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
       - Effect: Allow
         Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
         Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WATCHLIST_TABLE}
       - Effect: Allow
         Action:
          - s3:PutObject
          - s3:GetObject
         Resource: arn:aws:s3:::${self:provider.environment.WATCHLIST_S3_BUCKET}/*
       - Effect: Allow
         Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
         Resource:
          - "*"


resources:
  Resources:

    WatchListDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: itemId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: itemId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.WATCHLIST_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL

    WatchListBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.WATCHLIST_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.WATCHLIST_S3_BUCKET}/*'
        Bucket: !Ref WatchListBucket


    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
